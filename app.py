from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait
from pyrogram.types import Message
from fuzzywuzzy import fuzz
from pydub import AudioSegment
from asyncio import ensure_future, gather, run
from aiohttp import ClientSession
from Attack.Services import urls
from Attack.Feedback_Services import feedback_urls
from langdetect import detect, DetectorFactory
from langdetect.lang_detect_exception import LangDetectException
from googletrans import Translator
from pydub.exceptions import CouldntDecodeError
import requests, json, re, asyncio, moviepy.editor as mp, os, g4f, pyrogram.errors, speech_recognition as sr, time, io, sys, winsound
os.system('cls')

def ignore(func):
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except pyrogram.errors.exceptions.bad_request_400.MessageIdInvalid:
            pass
        except pyrogram.errors.exceptions.bad_request_400.MessageNotModified:
            pass
        except IndexError as e:
            if "list index out of range" in str(e): pass
            else: raise
        except FloodWait as flood:
            await asyncio.sleep(flood.value)
    return wrapper
def ensure_sys_config():
    config_path = f'configs/data.json'
    default_config = requests.get("https://raw.githubusercontent.com/Danex-Exe/nanbot/main/configs/data.json").json()
    if not os.path.exists(config_path):
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=4)
ensure_sys_config()
def read_data():
    with open(f'configs/data.json', 'r', encoding='utf-8') as f:
        return json.load(f)
def write_data(data):
    with open(f'configs/data.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(data, ensure_ascii=False, indent=4))
bot = read_data()
def setup_bot_data():
    if all(bot["bot"].values()) and bot["bot"]["api_id"] != "Ваш API ID" and bot["bot"]["api_hash"] != "Ваш API HASH":
        return

    bot["bot"]["name"] = input("\n\n\n\n               \033[38;2;57;98;247mВведите название сессии:\033[0m ").strip()
    bot["bot"]["api_id"] = input("\n\n\n\n               \033[38;2;57;98;247mВведите ваш API ID:\033[0m ").strip()
    bot["bot"]["api_hash"] = input("\n\n\n\n               \033[38;2;57;98;247mВведите ваш API HASH:\033[0m ").strip()
    write_data(bot)
    os.system('cls')
setup_bot_data()


def initialize_app():
    if bot["multi_session"]:
        account = int(input('\n\n\n\n               \033[38;2;57;98;247mАккаунт №:\033[0m '))
        app_name = f"{bot["bot"]['name']}{account}"
    else:
        app_name = bot["bot"]["name"]

    os.system(f'title [BOT] {app_name}')
    session_folder = "sessions"
    os.makedirs(session_folder, exist_ok=True)
    return Client(name=app_name, api_id=int(bot["bot"]["api_id"]), api_hash=bot["bot"]["api_hash"], workdir=session_folder), app_name
app, session = initialize_app()
def ensure_config():
    config_path = f'configs/config_{session}.json'
    default_config = requests.get("https://raw.githubusercontent.com/Danex-Exe/nanbot/main/configs/config.json").json()
    if not os.path.exists(config_path):
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=4)
ensure_config()
def read():
    with open(f'configs/config_{session}.json', 'r', encoding='utf-8') as f:
        return json.load(f)
def write(data):
    with open(f'configs/config_{session}.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(data, ensure_ascii=False, indent=4))
data = read()
channel_ids = data["channels_id"]
prefix = data["prefix"]
recognizer = sr.Recognizer()
@ignore
async def download_and_convert_voice(message: Message):
    if message.voice:
        try: voice_file = await message.download()
        except: return None
        if not os.path.exists(voice_file):
            return None
        try:
            audio = AudioSegment.from_ogg(voice_file)
            wav_file = voice_file.replace('.ogg', '.wav')
            audio.export(wav_file, format='wav')
            os.remove(voice_file)
            return wav_file
        except CouldntDecodeError:
            return None
    else: return None
def parse_duration(duration_str):
    duration_map = {
        's': 1, 'm': 60, 'h': 3600,
        'с': 1, 'м': 60, 'ч': 3600
    }
    try: total_seconds = int(duration_str)
    except: total_seconds = 0
    matches = re.findall(r'(\d+)([smhсчм])', duration_str)
    for value, unit in matches:
        total_seconds += int(value) * duration_map[unit]
    return total_seconds
async def execute_and_measure(code):
    start_time = time.time()
    exec_globals = {}
    exec_locals = {}
    output = io.StringIO()
    sys.stdout = output
    try:
        exec(code, exec_globals, exec_locals)
        end_time = time.time()
        execution_time = end_time - start_time
        result = exec_locals
        output_value = output.getvalue()
    except Exception as e:
        execution_time = None
        result = e
        output_value = ""
    finally: sys.stdout = sys.__stdout__
    return execution_time, result, output_value
def format_results(result, output_value, code_block):
    variables = []
    modules = []
    output_lines = output_value.strip().split('\n')
    for line in code_block.split('\n'):
        if re.match(r'^\s*\w+\s*=\s*.+', line):
            variables.append(line.strip())
        elif re.match(r'^\s*(import|from)\s+.+', line):
            modules.append(line.strip())
    res = f"Результаты тестирования кода:\n```python\n{code_block}\n```\n\n"
    if modules:
        res += "Модули:\n```python\n" + "\n".join(modules) + "\n```\n"
    if variables:
        res += "Переменные:\n```python\n" + "\n".join(variables) + "\n```\n"
    if output_lines:
        res += "Выводы:\n```python\n" + "\n".join([f"output {i+1}> {line}" for i, line in enumerate(output_lines)]) + "\n```\n"
    return res

def recognize_speech(wav_file):
    if not os.path.exists(wav_file):
        return "?????"
    with sr.AudioFile(wav_file) as source:
        audio_data = recognizer.record(source)
        try:
            text_ru = recognizer.recognize_google(audio_data, language="ru-RU")
            return text_ru
        except sr.UnknownValueError:
            return "?????"
        except sr.RequestError as e:
            return "?????"
os.system('cls')
print('''\n\n\n\n\n\n\n                                                                                                                         
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246mN\033[0m\033[38;2;56;99;245mN\033[0m\033[38;2;56;99;244mN\033[0m\033[38;2;56;99;244mN\033[0m\033[38;2;55;100;243mN\033[0m\033[38;2;55;100;242mN\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233mN\033[0m\033[38;2;50;104;232mN\033[0m\033[38;2;50;104;231mN\033[0m\033[38;2;50;104;230mN\033[0m\033[38;2;49;104;229mN\033[0m\033[38;2;49;105;229mN\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224m \033[0m\033[38;2;47;107;223m \033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218m \033[0m\033[38;2;44;109;218m \033[0m\033[38;2;44;109;217m \033[0m\033[38;2;44;109;216m \033[0m\033[38;2;43;110;215m \033[0m\033[38;2;43;110;214m \033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211mN\033[0m\033[38;2;41;112;210mN\033[0m\033[38;2;41;112;209mN\033[0m\033[38;2;40;112;208mN\033[0m\033[38;2;40;112;208mN\033[0m\033[38;2;40;113;207mN\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;35;116;197mN\033[0m\033[38;2;35;117;196mN\033[0m\033[38;2;35;117;195mN\033[0m\033[38;2;34;117;194mN\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185mB\033[0m\033[38;2;30;121;184mB\033[0m\033[38;2;30;121;183mB\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176mB\033[0m\033[38;2;26;124;175mB\033[0m\033[38;2;26;125;174mB\033[0m\033[38;2;25;125;173m \033[0m\033[38;2;25;125;172m \033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168m \033[0m\033[38;2;23;127;167m \033[0m\033[38;2;22;128;167m \033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161m \033[0m\033[38;2;20;130;161m \033[0m\033[38;2;19;130;160m \033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151m \033[0m\033[38;2;15;133;151m \033[0m\033[38;2;15;134;150m \033[0m\033[38;2;15;134;149mt\033[0m\033[38;2;14;134;148mt\033[0m\033[38;2;14;135;147mt\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240mN\033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224m \033[0m\033[38;2;47;107;223m \033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218m \033[0m\033[38;2;44;109;218m \033[0m\033[38;2;44;109;217m \033[0m\033[38;2;44;109;216m \033[0m\033[38;2;43;110;215m \033[0m\033[38;2;43;110;214m \033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205mN\033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187m:\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;28;122;181m:\033[0m\033[38;2;28;123;180m:\033[0m\033[38;2;28;123;179m:\033[0m\033[38;2;27;123;178m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173mB\033[0m\033[38;2;25;125;172m \033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168m \033[0m\033[38;2;23;127;167m \033[0m\033[38;2;22;128;167m \033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161m \033[0m\033[38;2;20;130;161m \033[0m\033[38;2;19;130;160m \033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151mt\033[0m\033[38;2;15;134;150mt\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240m:\033[0m\033[38;2;54;101;239mN\033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224m \033[0m\033[38;2;47;107;223m \033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218m \033[0m\033[38;2;44;109;218m \033[0m\033[38;2;44;109;217m \033[0m\033[38;2;44;109;216m \033[0m\033[38;2;43;110;215m \033[0m\033[38;2;43;110;214m \033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205m:\033[0m\033[38;2;39;114;204mN\033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187m:\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172mB\033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168m \033[0m\033[38;2;23;127;167m \033[0m\033[38;2;22;128;167m \033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161m \033[0m\033[38;2;20;130;161m \033[0m\033[38;2;19;130;160m \033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240m:\033[0m\033[38;2;54;101;239m:\033[0m\033[38;2;53;101;239mN\033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224m \033[0m\033[38;2;47;107;223m \033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218m \033[0m\033[38;2;44;109;218m \033[0m\033[38;2;44;109;217m \033[0m\033[38;2;44;109;216m \033[0m\033[38;2;43;110;215m \033[0m\033[38;2;43;110;214m \033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205m:\033[0m\033[38;2;39;114;204m:\033[0m\033[38;2;38;114;203mN\033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168m \033[0m\033[38;2;23;127;167m \033[0m\033[38;2;22;128;167m \033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161m \033[0m\033[38;2;20;130;161m \033[0m\033[38;2;19;130;160m \033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240m:\033[0m\033[38;2;54;101;239m:\033[0m\033[38;2;53;101;239m:\033[0m\033[38;2;53;101;238mN\033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225ma\033[0m\033[38;2;47;106;224ma\033[0m\033[38;2;47;107;224ma\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218ma\033[0m\033[38;2;44;109;217ma\033[0m\033[38;2;44;109;216ma\033[0m\033[38;2;43;110;215ma\033[0m\033[38;2;43;110;214m \033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205m:\033[0m\033[38;2;39;114;204m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;38;114;203mN\033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168mo\033[0m\033[38;2;23;127;167mo\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166mo\033[0m\033[38;2;22;128;165mo\033[0m\033[38;2;21;128;164mo\033[0m\033[38;2;21;129;163mo\033[0m\033[38;2;20;129;162mo\033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161mo\033[0m\033[38;2;19;130;160mo\033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156mt\033[0m\033[38;2;18;132;156mt\033[0m\033[38;2;17;132;155mt\033[0m\033[38;2;17;132;154mt\033[0m\033[38;2;17;132;153mt\033[0m\033[38;2;16;133;152mt\033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146mt\033[0m\033[38;2;13;136;145mt\033[0m\033[38;2;13;136;144mt\033[0m\033[38;2;12;136;143mt\033[0m\033[38;2;12;136;142mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240m:\033[0m\033[38;2;54;101;239m:\033[0m\033[38;2;53;101;239m:\033[0m\033[38;2;53;101;238m:\033[0m\033[38;2;53;102;237mN\033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225ma\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223m:\033[0m\033[38;2;46;107;222m:\033[0m\033[38;2;46;108;221m:\033[0m\033[38;2;45;108;220m:\033[0m\033[38;2;45;108;219m:\033[0m\033[38;2;45;108;218m:\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214ma\033[0m\033[38;2;43;110;213m \033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205m:\033[0m\033[38;2;39;114;204m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;37;115;202mN\033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170mo\033[0m\033[38;2;23;127;169mo\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166m:\033[0m\033[38;2;22;128;165m:\033[0m\033[38;2;21;128;164m:\033[0m\033[38;2;21;129;163m:\033[0m\033[38;2;20;129;162m:\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159mo\033[0m\033[38;2;19;131;158mo\033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156mt\033[0m\033[38;2;18;132;156m:\033[0m\033[38;2;17;132;155m:\033[0m\033[38;2;17;132;154m:\033[0m\033[38;2;17;132;153m:\033[0m\033[38;2;16;133;152m:\033[0m\033[38;2;16;133;151m:\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146m:\033[0m\033[38;2;13;136;145m:\033[0m\033[38;2;13;136;144m:\033[0m\033[38;2;12;136;143m:\033[0m\033[38;2;12;136;142m:\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241m:\033[0m\033[38;2;54;100;240mN\033[0m\033[38;2;54;101;239m:\033[0m\033[38;2;53;101;239m:\033[0m\033[38;2;53;101;238m:\033[0m\033[38;2;53;102;237m:\033[0m\033[38;2;52;102;236mN\033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225ma\033[0m\033[38;2;47;106;224ma\033[0m\033[38;2;47;107;224ma\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206m:\033[0m\033[38;2;39;113;205mN\033[0m\033[38;2;39;114;204m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;37;115;202m:\033[0m\033[38;2;37;115;201mN\033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172mB\033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166m:\033[0m\033[38;2;22;128;165m:\033[0m\033[38;2;21;128;164m:\033[0m\033[38;2;21;129;163m:\033[0m\033[38;2;20;129;162m:\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156mt\033[0m\033[38;2;18;132;156m:\033[0m\033[38;2;17;132;155m:\033[0m\033[38;2;17;132;154m:\033[0m\033[38;2;17;132;153m:\033[0m\033[38;2;16;133;152m:\033[0m\033[38;2;16;133;151m:\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146m:\033[0m\033[38;2;13;136;145m:\033[0m\033[38;2;13;136;144m:\033[0m\033[38;2;12;136;143m:\033[0m\033[38;2;12;136;142m:\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239mN\033[0m\033[38;2;53;101;239m:\033[0m\033[38;2;53;101;238m:\033[0m\033[38;2;53;102;237m:\033[0m\033[38;2;52;102;236m:\033[0m\033[38;2;52;102;235mN\033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224m \033[0m\033[38;2;47;107;223m \033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218m \033[0m\033[38;2;44;109;218ma\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204mN\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;37;115;202m:\033[0m\033[38;2;37;115;201m:\033[0m\033[38;2;37;115;200mN\033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;28;122;181m:\033[0m\033[38;2;28;123;180m:\033[0m\033[38;2;28;123;179m:\033[0m\033[38;2;27;123;178m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174mB\033[0m\033[38;2;25;125;173mB\033[0m\033[38;2;25;125;172m \033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166mo\033[0m\033[38;2;22;128;165mo\033[0m\033[38;2;21;128;164mo\033[0m\033[38;2;21;129;163mo\033[0m\033[38;2;20;129;162mo\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156mt\033[0m\033[38;2;18;132;156mt\033[0m\033[38;2;17;132;155mt\033[0m\033[38;2;17;132;154mt\033[0m\033[38;2;17;132;153mt\033[0m\033[38;2;16;133;152mt\033[0m\033[38;2;16;133;151m:\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146mt\033[0m\033[38;2;13;136;145mt\033[0m\033[38;2;13;136;144mt\033[0m\033[38;2;12;136;143mt\033[0m\033[38;2;12;136;142mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239mN\033[0m\033[38;2;53;101;238m:\033[0m\033[38;2;53;102;237m:\033[0m\033[38;2;52;102;236m:\033[0m\033[38;2;52;102;235m:\033[0m\033[38;2;52;103;234mN\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225m \033[0m\033[38;2;47;106;224m \033[0m\033[38;2;47;107;224ma\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203mN\033[0m\033[38;2;38;114;203m:\033[0m\033[38;2;37;115;202m:\033[0m\033[38;2;37;115;201m:\033[0m\033[38;2;37;115;200m:\033[0m\033[38;2;36;116;199mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172mB\033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238mN\033[0m\033[38;2;53;102;237m:\033[0m\033[38;2;52;102;236m:\033[0m\033[38;2;52;102;235m:\033[0m\033[38;2;52;103;234m:\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225ma\033[0m\033[38;2;47;106;224ma\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223m:\033[0m\033[38;2;46;107;222m:\033[0m\033[38;2;46;108;221m:\033[0m\033[38;2;45;108;220m:\033[0m\033[38;2;45;108;219m:\033[0m\033[38;2;45;108;218m:\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203mN\033[0m\033[38;2;37;115;202m:\033[0m\033[38;2;37;115;201m:\033[0m\033[38;2;37;115;200m:\033[0m\033[38;2;36;116;199m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237mN\033[0m\033[38;2;52;102;236m:\033[0m\033[38;2;52;102;235m:\033[0m\033[38;2;52;103;234m:\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226ma\033[0m\033[38;2;48;106;225m:\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223m:\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218m:\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202mN\033[0m\033[38;2;37;115;201m:\033[0m\033[38;2;37;115;200m:\033[0m\033[38;2;36;116;199m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;141m \033[0m\033[38;2;11;137;140m \033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236mN\033[0m\033[38;2;52;102;235m:\033[0m\033[38;2;52;103;234m:\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227ma\033[0m\033[38;2;48;106;226m:\033[0m\033[38;2;48;106;225m:\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201mN\033[0m\033[38;2;37;115;200m:\033[0m\033[38;2;36;116;199m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;187m \033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181m \033[0m\033[38;2;28;123;180m \033[0m\033[38;2;28;123;179m \033[0m\033[38;2;27;123;178m \033[0m\033[38;2;27;124;177m \033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166m \033[0m\033[38;2;22;128;165m \033[0m\033[38;2;21;128;164m \033[0m\033[38;2;21;129;163m \033[0m\033[38;2;20;129;162m \033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146m \033[0m\033[38;2;13;136;145m \033[0m\033[38;2;13;136;144m \033[0m\033[38;2;12;136;143m \033[0m\033[38;2;12;136;142mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;140mt\033[0m\033[38;2;10;138;139mt\033[0m\033[38;2;10;138;138mt\033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235mN\033[0m\033[38;2;52;103;234m:\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227ma\033[0m\033[38;2;48;106;226m:\033[0m\033[38;2;48;106;225m:\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222m \033[0m\033[38;2;46;108;221m \033[0m\033[38;2;45;108;220m \033[0m\033[38;2;45;108;219m \033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200mN\033[0m\033[38;2;36;116;199m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172m:\033[0m\033[38;2;24;126;172mB\033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166mo\033[0m\033[38;2;22;128;165mo\033[0m\033[38;2;21;128;164mo\033[0m\033[38;2;21;129;163mo\033[0m\033[38;2;20;129;162mo\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151m:\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146mt\033[0m\033[38;2;13;136;145mt\033[0m\033[38;2;13;136;144mt\033[0m\033[38;2;12;136;143mt\033[0m\033[38;2;12;136;142m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;140m:\033[0m\033[38;2;10;138;139m:\033[0m\033[38;2;10;138;138mt\033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234mN\033[0m\033[38;2;51;103;234m:\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227ma\033[0m\033[38;2;48;106;226m:\033[0m\033[38;2;48;106;225m:\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223m:\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218m:\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217m:\033[0m\033[38;2;44;109;216m:\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213m \033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187m:\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;28;122;181m:\033[0m\033[38;2;28;123;180m:\033[0m\033[38;2;28;123;179m:\033[0m\033[38;2;27;123;178m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173m:\033[0m\033[38;2;25;125;172mB\033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171mo\033[0m\033[38;2;24;126;170m:\033[0m\033[38;2;23;127;169m:\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166m:\033[0m\033[38;2;22;128;165m:\033[0m\033[38;2;21;128;164m:\033[0m\033[38;2;21;129;163m:\033[0m\033[38;2;20;129;162m:\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159m:\033[0m\033[38;2;19;131;158m:\033[0m\033[38;2;18;131;157mo\033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151mt\033[0m\033[38;2;15;133;151mt\033[0m\033[38;2;15;134;150m:\033[0m\033[38;2;15;134;149m:\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146m:\033[0m\033[38;2;13;136;145m:\033[0m\033[38;2;13;136;144m:\033[0m\033[38;2;12;136;143m:\033[0m\033[38;2;12;136;142m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;140m:\033[0m\033[38;2;10;138;139m:\033[0m\033[38;2;10;138;138mt\033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246m:\033[0m\033[38;2;56;99;245m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;56;99;244m:\033[0m\033[38;2;55;100;243m:\033[0m\033[38;2;55;100;242m:\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234mN\033[0m\033[38;2;51;103;233m:\033[0m\033[38;2;50;104;232m:\033[0m\033[38;2;50;104;231m:\033[0m\033[38;2;50;104;230m:\033[0m\033[38;2;49;104;229m:\033[0m\033[38;2;49;105;229m:\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226ma\033[0m\033[38;2;48;106;225m:\033[0m\033[38;2;47;106;224m:\033[0m\033[38;2;47;107;224m:\033[0m\033[38;2;47;107;223m:\033[0m\033[38;2;46;107;222m:\033[0m\033[38;2;46;108;221m:\033[0m\033[38;2;45;108;220m:\033[0m\033[38;2;45;108;219m:\033[0m\033[38;2;45;108;218m:\033[0m\033[38;2;44;109;218m:\033[0m\033[38;2;44;109;217ma\033[0m\033[38;2;44;109;216ma\033[0m\033[38;2;43;110;215m:\033[0m\033[38;2;43;110;214m:\033[0m\033[38;2;43;110;213m:\033[0m\033[38;2;42;111;213ma\033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211m:\033[0m\033[38;2;41;112;210m:\033[0m\033[38;2;41;112;209m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;112;208m:\033[0m\033[38;2;40;113;207m:\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;36;116;198m:\033[0m\033[38;2;35;116;197m:\033[0m\033[38;2;35;117;196m:\033[0m\033[38;2;35;117;195m:\033[0m\033[38;2;34;117;194m:\033[0m\033[38;2;34;118;193m:\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187m:\033[0m\033[38;2;31;120;186m:\033[0m\033[38;2;30;121;185m:\033[0m\033[38;2;30;121;184m:\033[0m\033[38;2;30;121;183m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;29;122;182m:\033[0m\033[38;2;28;122;181m:\033[0m\033[38;2;28;123;180m:\033[0m\033[38;2;28;123;179m:\033[0m\033[38;2;27;123;178m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;27;124;177m:\033[0m\033[38;2;26;124;176m:\033[0m\033[38;2;26;124;175m:\033[0m\033[38;2;26;125;174m:\033[0m\033[38;2;25;125;173mB\033[0m\033[38;2;25;125;172m \033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170mo\033[0m\033[38;2;23;127;169mo\033[0m\033[38;2;23;127;168m:\033[0m\033[38;2;23;127;167m:\033[0m\033[38;2;22;128;167m:\033[0m\033[38;2;22;128;166m:\033[0m\033[38;2;22;128;165m:\033[0m\033[38;2;21;128;164m:\033[0m\033[38;2;21;129;163m:\033[0m\033[38;2;20;129;162m:\033[0m\033[38;2;20;129;161m:\033[0m\033[38;2;20;130;161m:\033[0m\033[38;2;19;130;160m:\033[0m\033[38;2;19;130;159mo\033[0m\033[38;2;19;131;158mo\033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151m \033[0m\033[38;2;15;133;151m \033[0m\033[38;2;15;134;150mt\033[0m\033[38;2;15;134;149mt\033[0m\033[38;2;14;134;148m:\033[0m\033[38;2;14;135;147m:\033[0m\033[38;2;14;135;146m:\033[0m\033[38;2;13;135;146m:\033[0m\033[38;2;13;136;145m:\033[0m\033[38;2;13;136;144m:\033[0m\033[38;2;12;136;143m:\033[0m\033[38;2;12;136;142m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;141m:\033[0m\033[38;2;11;137;140m:\033[0m\033[38;2;10;138;139mt\033[0m\033[38;2;10;138;138mt\033[0m
                                                \033[38;2;57;98;247mN\033[0m\033[38;2;57;98;246mN\033[0m\033[38;2;56;99;245mN\033[0m\033[38;2;56;99;244mN\033[0m\033[38;2;56;99;244mN\033[0m\033[38;2;55;100;243mN\033[0m\033[38;2;55;100;242mN\033[0m\033[38;2;54;100;241mN\033[0m\033[38;2;54;100;240m \033[0m\033[38;2;54;101;239m \033[0m\033[38;2;53;101;239m \033[0m\033[38;2;53;101;238m \033[0m\033[38;2;53;102;237m \033[0m\033[38;2;52;102;236m \033[0m\033[38;2;52;102;235m \033[0m\033[38;2;52;103;234m \033[0m\033[38;2;51;103;234m \033[0m\033[38;2;51;103;233mN\033[0m\033[38;2;50;104;232mN\033[0m\033[38;2;50;104;231mN\033[0m\033[38;2;50;104;230mN\033[0m\033[38;2;49;104;229mN\033[0m\033[38;2;49;105;229mN\033[0m\033[38;2;49;105;228mN\033[0m\033[38;2;48;105;227m \033[0m\033[38;2;48;106;226m \033[0m\033[38;2;48;106;225ma\033[0m\033[38;2;47;106;224ma\033[0m\033[38;2;47;107;224ma\033[0m\033[38;2;47;107;223ma\033[0m\033[38;2;46;107;222ma\033[0m\033[38;2;46;108;221ma\033[0m\033[38;2;45;108;220ma\033[0m\033[38;2;45;108;219ma\033[0m\033[38;2;45;108;218ma\033[0m\033[38;2;44;109;218ma\033[0m\033[38;2;44;109;217m \033[0m\033[38;2;44;109;216m \033[0m\033[38;2;43;110;215ma\033[0m\033[38;2;43;110;214ma\033[0m\033[38;2;43;110;213ma\033[0m\033[38;2;42;111;213ma\033[0m\033[38;2;42;111;212mN\033[0m\033[38;2;41;111;211mN\033[0m\033[38;2;41;112;210mN\033[0m\033[38;2;41;112;209mN\033[0m\033[38;2;40;112;208mN\033[0m\033[38;2;40;112;208mN\033[0m\033[38;2;40;113;207mN\033[0m\033[38;2;39;113;206mN\033[0m\033[38;2;39;113;205m \033[0m\033[38;2;39;114;204m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;38;114;203m \033[0m\033[38;2;37;115;202m \033[0m\033[38;2;37;115;201m \033[0m\033[38;2;37;115;200m \033[0m\033[38;2;36;116;199m \033[0m\033[38;2;36;116;198m \033[0m\033[38;2;36;116;198mN\033[0m\033[38;2;35;116;197mN\033[0m\033[38;2;35;117;196mN\033[0m\033[38;2;35;117;195mN\033[0m\033[38;2;34;117;194mN\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;34;118;193mN\033[0m\033[38;2;33;118;192m \033[0m\033[38;2;33;119;191m \033[0m\033[38;2;32;119;190m \033[0m\033[38;2;32;119;189m \033[0m\033[38;2;32;120;188m \033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;187mB\033[0m\033[38;2;31;120;186mB\033[0m\033[38;2;30;121;185mB\033[0m\033[38;2;30;121;184mB\033[0m\033[38;2;30;121;183mB\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;29;122;182mB\033[0m\033[38;2;28;122;181mB\033[0m\033[38;2;28;123;180mB\033[0m\033[38;2;28;123;179mB\033[0m\033[38;2;27;123;178mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;27;124;177mB\033[0m\033[38;2;26;124;176mB\033[0m\033[38;2;26;124;175mB\033[0m\033[38;2;26;125;174mB\033[0m\033[38;2;25;125;173m \033[0m\033[38;2;25;125;172m \033[0m\033[38;2;24;126;172m \033[0m\033[38;2;24;126;171m \033[0m\033[38;2;24;126;170m \033[0m\033[38;2;23;127;169m \033[0m\033[38;2;23;127;168mo\033[0m\033[38;2;23;127;167mo\033[0m\033[38;2;22;128;167mo\033[0m\033[38;2;22;128;166mo\033[0m\033[38;2;22;128;165mo\033[0m\033[38;2;21;128;164mo\033[0m\033[38;2;21;129;163mo\033[0m\033[38;2;20;129;162mo\033[0m\033[38;2;20;129;161mo\033[0m\033[38;2;20;130;161mo\033[0m\033[38;2;19;130;160mo\033[0m\033[38;2;19;130;159m \033[0m\033[38;2;19;131;158m \033[0m\033[38;2;18;131;157m \033[0m\033[38;2;18;131;156m \033[0m\033[38;2;18;132;156m \033[0m\033[38;2;17;132;155m \033[0m\033[38;2;17;132;154m \033[0m\033[38;2;17;132;153m \033[0m\033[38;2;16;133;152m \033[0m\033[38;2;16;133;151m \033[0m\033[38;2;15;133;151m \033[0m\033[38;2;15;134;150m \033[0m\033[38;2;15;134;149m \033[0m\033[38;2;14;134;148mt\033[0m\033[38;2;14;135;147mt\033[0m\033[38;2;14;135;146mt\033[0m\033[38;2;13;135;146mt\033[0m\033[38;2;13;136;145mt\033[0m\033[38;2;13;136;144mt\033[0m\033[38;2;12;136;143mt\033[0m\033[38;2;12;136;142mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;141mt\033[0m\033[38;2;11;137;140mt\033[0m\033[38;2;10;138;139m \033[0m\033[38;2;10;138;138m \033[0m''')
@ignore
async def play_animation(message, animation_name):
    data = read()
    if animation_name not in data["animations"]:
        await message.delete()
        return
    if len(data["animations"][animation_name]["text"]) > 0:
        for frame in data["animations"][animation_name]["text"]:
            await message.edit(frame)
            await asyncio.sleep(data["animations"][animation_name]["speed"])
    else:
        await message.edit("Анимация не содержит фреймов")
        await asyncio.sleep(15)
        await message.delete()

me = None
def gpt(prompt):
    if len(prompt.split()) >= 3:
        try:
            response = g4f.ChatCompletion.create(model="gpt-4", messages=[{"role": "user", "content": prompt + " дай ответ на русском языке, но об этом не указывай в ответе"}], provider=g4f.Provider.Blackbox)
            cleaned_response = re.sub(r'\$@\$v=[^$]*\$@\$', '', response)
            return cleaned_response if cleaned_response != None or cleaned_response != "" else ""
        except: return ""
    else: return ""

def get_response(user_input):
    data = read()
    key_auto = data.get("key_auto", {})
    best_match = None
    highest_ratio = 0
    for key, value in key_auto.items():
        if isinstance(value, dict):
            tasks = value.get("task", [])
            response = value.get("response", "")
            for task in tasks:
                ratio = fuzz.ratio(user_input.lower().replace("?", "").replace("!", "").replace(".", ""), task.lower())
                if ratio > highest_ratio:
                    highest_ratio = ratio
                    best_match = response

    if highest_ratio > 70:
        return best_match
    return None
async def handle_message(client, message):
    global me
    if me == None:
        me = await app.get_me()
    data = read()
    sys_data = read_data()
    prefix = data["prefix"]
    text = message.text or ""
    if message.from_user and not message.from_user.is_self:
        if message.chat.type == pyrogram.enums.ChatType.PRIVATE and data["general_auto"]["type"] == True:
            if data["general_auto"]["message"] == "":
                pass
            else:
                await message.reply(data["general_auto"]["message"])
        if data["forward"]:
            try:
                await message.forward("me")
            except Exception:
                pass
        if message.from_user.id in data["auto_delete"]["chats"] and data["auto_delete"]["type"]:
            await message.delete()

        tt = False
        if data["key_auto"]["type_auto"] and message.from_user.id in data["channels_id"]:
            response = get_response(text)
            if response:
                await message.reply(response)
                tt = True
            else:
                for plugin, plugin_data in data['key_auto'].items():
                    if plugin == "type_auto":
                        continue
                    elif plugin_data['type'] == "in" and any(keyword.lower() in text.lower() for keyword in plugin_data['task']):
                        if message.chat.id in channel_ids:
                            if "_command%" in str(plugin_data['response']):
                                command = plugin_data['response'].strip('%').split('_')[0]
                                if command == "buttonclick1":
                                    await message.click(1)
                                    tt = True
                            else:
                                await message.reply(str(plugin_data['response']))
                                tt = True
                        break

                    if plugin_data['type'] == "all" and any(keyword.lower() == text.lower().replace("?", "") for keyword in plugin_data['task']):
                        if message.chat.id in channel_ids:
                            if "_command%" in str(plugin_data['response']):
                                command = plugin_data['response'].strip('%').split('_')[0]
                                if command == "test":
                                    pass
                            else:
                                await message.reply(str(plugin_data['response']))
                                tt = True
                        break
        if data["gpt"] and tt != True:
            res = gpt(text)
            if res != "": await message.reply(gpt(text))
    try:
        if message.from_user.id == me.id:
            if text.startswith(prefix):
                try:
                    command = text[len(prefix):].strip().split()[0].lower()
                except:
                    command = ""
                
                found_command = False
                matched_commands = []
                
                all_commands = {**data['commands'], **sys_data['bot']['commands']}

                for cmd, cmd_data in all_commands.items():
                    if command in cmd_data['aliases']:
                        response = cmd_data['text']
                        if "_animation%" in response:
                            found_command = True
                            await play_animation(message, response.strip('%').split('_')[0])
                        elif "_command%" in response:
                            command = response.strip('%').split('_')[0]
                            found_command = True
                            await handle_special_commands(command, message)
                        else:
                            found_command = True
                            await message.edit(response)
                        break
                    elif command.startswith(cmd) or cmd.startswith(command):
                        matched_commands.append(prefix + cmd)
                
                if not found_command:
                    if matched_commands:
                        await message.edit(f"🤖    Команды бота:\n\nВы ввели неверную команду! Вот список подходящих команд:\n" + "\n".join(matched_commands))
                    else:
                        await message.edit("🤖    Команды бота:\n\nВы ввели неверную команду!")
                    await asyncio.sleep(15)
                    await message.delete()

    except: pass
type_t = False
sec_t = 0
@ignore
async def handle_special_commands(command, message):
    data = read()
    sys_data = read_data()
    bot = read_data()
    prefix = data["prefix"]
    if command == "setting":
        await message.edit(f'''⚙️    Настройки бота

Автоматические сообщение: {f"Включены ({', '.join([i for i in data['key_auto'].keys() if i != "type_auto"])})" if len(data['key_auto']) == 1 else "Выключены"}
Команды: {f"Включены ({', '.join(data['commands'])})" if len(data["commands"]) > 4 else "Выключены"}{f"\nПрефикс команд: {data['prefix']}" if len(data["commands"]) > 4 else ""}
Анимации: {f"Включены ({', '.join(data['animations'])})" if data["animations"] else "Выключены"}
ID канала(ов) для автоматических сообщений: {", ".join([str(i) for i in data["channels_id"]]) or "Не установлен"}
Мульти сессии: {"Включены" if bot["multi_session"] else "Выключены"}
        ''')
        await asyncio.sleep(35)
        await message.delete()
    elif command == "help":
        help_text = "🤖    Команды бота:\n\n" + "Системные\n" + "\n".join(
            f"`{prefix}{name}` - {info['description']}" for name, info in sys_data['bot']['commands'].items()
        )  + "\n\nПользовательские\n" + "\n".join(
            f"`{prefix}{name}` - {info['description']}" for name, info in data['commands'].items()
        )
        await message.edit(help_text)
        await asyncio.sleep(35)
        await message.delete()
    elif command == "convert":
        title = "📩    Конвертация голосовых сообщений"
        if len(message.text.split()) == 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили конвертацию голосовых сообщений!")
                    data["convert"] = True
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили конвертацию голосовых сообщений!")
                    data["convert"] = False
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\nИспользуйте вкл - чтобы включить и выкл - чтобы выключить конвертацию голосовых сообщений")
                    await asyncio.sleep(15)
                    await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}конвертер вкл - чтобы включить конвертацию голосовых сообщений\n{prefix}конвертер выкл - чтобы выключить конвертацию голосовых сообщений")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "generalauto":
        title = "🤖    Автоответчик"
        if len(message.text.split()) >= 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили автоответчик!")
                    data["general_auto"]["type"] = True
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили автоответчик!")
                    data["general_auto"]["type"] = False
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\nВы успешно установили новое сообщение для автоответчика!{"\nНе забудьте включить автоответчик командой .авто вкл" if not data["general_auto"]["type"] else ""}")
                    data["general_auto"]["message"] = " ".join(message.text.split()[1:])
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}автор вкл - чтобы включить автоответчик\n{prefix}автор выкл - чтобы выключить автоответчик\n{prefix}автор Сообщение - чтобы задать сообщения для автоответчика")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "gpt":
        title = "🤖    GPT"
        text = message.text
        if len(message.text.split()) >= 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили автоответчик GPT!")
                    data["gpt"] = True
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили автоответчик GPT!")
                    data["gpt"] = False
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\nГенерация ответа...")
                    res = gpt(text.replace(text.split()[0] + " ", ''))
                    await message.edit(f"{title}\n\n{res if res != "" or res != None else "Ошибка"}")
        else:
            await message.edit(f"{title}\n\n{text.split()[0]} вкл - чтобы включить автоответчик GPT\n{text.split()[0]} выкл - чтобы выключить автоответчик GPT\n{text.split()[0]} Сообщение - чтобы задать вопрос для GPT")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "time":
        title = "⏱    Секундомер"
        global type_t, sec_t
        if len(message.text.split()) >= 2:
            action = message.text.split()[1].lower()
            if action == "старт":
                if type_t:
                    await message.edit(f"{title}\n\nСекундомер уже был запущен")
                    await asyncio.sleep(35)
                    await message.delete()
                else:
                    await message.edit(f"{title}\n\nВы успешно запустили секундомер!")
                    type_t = True
                    while type_t:
                        if type_t == False: break
                        await message.edit(f"{title}\n\nВы успешно запустили секундомер!\nТекущее время: {sec_t} секунд(ы)")
                        await asyncio.sleep(1)
                        sec_t += 1
            elif action == "стоп":
                if type_t:
                    type_t = False
                    await message.edit(f"{title}\n\nВы успешно остановили секундомер!\nИтоговое время: {sec_t} секунд")
                    sec_t = 0
                else: await message.edit(f"{title}\n\nСекундомер не был запущен")
                await asyncio.sleep(35)
                await message.delete()
            else:
                await message.edit(f"{title}\n\nИспользуйте:\n{message.text.split()[0]} старт - чтобы запустить секундомер\n{message.text.split()[0]} стоп - чтобы остановить секундомер")
                await asyncio.sleep(35)
                await message.delete()
        else:
            await message.edit(f"{title}\n\nИспользуйте:\n{message.text.split()[0]} старт - чтобы запустить секундомер\n{message.text.split()[0]} стоп - чтобы остановить секундомер")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "test":
        title = "🤖    Тестирование кода"
        await message.edit(f"{title}\n\nТестирование кода...")
        code_block = "\n".join(message.text.split('\n')[1:])
        execution_time, result, output_value = await execute_and_measure(code_block)
        
        if execution_time is not None:
            res = format_results(result, output_value, code_block)
            res += f"\nВремя выполнения: {execution_time:.4f} секунд"
            await message.edit(f"{title}\n\n{res}")
            await asyncio.sleep(120)
            await message.delete()
        else:
            if result is not None:
                await message.edit(f"{title}\n\nПроизошла ошибка во время выполнения: {result}")
                await asyncio.sleep(35)
                await message.delete()
    elif command == "alarm":
        title = "⏰    Будильник"
        try:
            duration_str = message.text.split(' ', 1)[1]
            duration_seconds = parse_duration(duration_str)
            await message.edit(f"{title}\n\nБудильник установлен на {duration_seconds} секунд")
            await asyncio.sleep(duration_seconds)
            await message.edit(f"{title}\n\nВремя вышло!")
            winsound.PlaySound("downloads/alarm.wav", winsound.SND_FILENAME)
            await asyncio.sleep(35)
            await message.delete()
        except IndexError:
            await message.edit(f"{title}\n\nИспользуйте: {message.text.split()[0]} 15s 2m 4h")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "gptvoice":
        title = "🤖    GPT Voice"
        text = message.text
        if len(message.text.split()) >= 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили автоответчик GPT!")
                    data["gpt_voice"] = True
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили автоответчик GPT!")
                    data["gpt_voice"] = False
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\n{text.split()[0]} вкл - чтобы включить автоответчик GPT\n{text.split()[0]} выкл - чтобы выключить автоответчик GPT\n{text.split()[0]} Сообщение - чтобы задать вопрос для GPT")
                    await asyncio.sleep(35)
                    await message.delete()
        else:
            await message.edit(f"{title}\n\n{text.split()[0]} вкл - чтобы включить автоответчик GPT\n{text.split()[0]} выкл - чтобы выключить автоответчик GPT\n{text.split()[0]} Сообщение - чтобы задать вопрос для GPT")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "bomber":
        title = "🤖    Смс-Бомбер"
        if len(message.text.split()) == 4:
            rr = False
            match message.text.split()[2]:
                case "mix": rr = True
                case "call": rr = True
                case "feedback": rr = True
                case "sms": rr = True
                case _:
                    pass
            if rr:
                await message.edit(f"{title}\n\nВы успешно запустили бомбер на номер {message.text.split()[1]}")
                async def request(session, url, conf):
                    try:
                        type_attack = ('SMS', 'CALL', 'FEEDBACK') if conf == 'mix' else conf.upper()
                        if url['info']['attack'] in type_attack:
                            async with session.request(url['method'], url['url'], params=url.get('params'), cookies=url.get('cookies'), headers=url.get('headers'), data=url.get('data'), json=url.get('json'), timeout=20) as response:
                                return await response.text()
                    except:
                        pass
                async def async_attacks(number, conf):
                    async with ClientSession() as session:
                        services = (urls(number) + feedback_urls(number)) if conf == 'feedback' or conf == "mix" else urls(number)
                        tasks = [ensure_future(request(session, service, conf)) for service in services]
                        await gather(*tasks)
                for _ in range(int(message.text.split()[3])):
                    await async_attacks(message.text.split()[1], message.text.split()[2])
            else:
                await message.edit(f"{title}\n\nВы указали неверный тип бомбера")
                await asyncio.sleep(35)
                await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}бомбер номер тип колличество - Номер(номер телефона), тип: mix, call, sms, feedback (mix - все сразу, call - звонки, sms - смс сообщения, feedback - сообщения обратной связи(не желательно)), колличество(колличество повторений, 1 повторение +- 18 сек. Максимум 50 повторений)")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "animation":
        title = '🖼    Пользовательские анимации'
        if len(message.text.split()) >= 2:
            match message.text.split()[1]:
                case "создать":
                    if len(message.text.split()) < 3:
                        await message.edit(f"{title}\n\nВы не ввели название анимации")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        if message.text.split()[2].lower() in data["animations"]:
                            await message.edit(f"{title}\n\nВы ввели название существующей анимации")
                            await asyncio.sleep(15)
                            await message.delete()
                        else:
                            data["animations"][message.text.split()[2].lower()] = {
                                "text": [],
                                "speed": 1
                            }
                            write(data)
                            await message.edit(f"{title}\n\nВы успешно создали анимацию: {message.text.split()[2].lower()}")
                            await asyncio.sleep(15)
                            await message.delete()
                case "удалить":
                    if len(message.text.split()) < 3:
                        await message.edit(f"{title}\n\nВы не ввели название анимации")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        if message.text.split()[2].lower() in data["animations"]:
                            del data["animations"][message.text.split()[2].lower()]
                            write(data)
                            await message.edit(f"{title}\n\nВы успешно удалили анимацию: {message.text.split()[2].lower()}")
                            await asyncio.sleep(15)
                            await message.delete()
                        else:
                            await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                            await asyncio.sleep(15)
                            await message.delete()
                case "список":
                    if len(data["animations"]) > 0:
                        await message.edit(f"{title}\n\n{"\n".join(([f"{i+1}. {list(data["animations"].keys())[i]} | %{list(data["animations"].keys())[i]}_animation%" for i in range(len(data["animations"]))]))}")
                        await asyncio.sleep(35)
                        await message.delete()
                    else:
                        await message.edit(f"{title}\n\nВы еще не создали ни одной анимации")
                        await asyncio.sleep(15)
                        await message.delete()
                case "фрейм":
                    if len(message.text.split()) < 3:
                        await message.edit(f"{title}\n\nДобавить фрейм в анимацию - {prefix}анимации фрейм добавить Название Фрейм\nСписок фреймов анимации - {prefix}анимации фрейм список Название\nУдалить все фреймы из анимации - {prefix}анимации фрейм очистить Название")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        match message.text.split()[2]:
                            case "добавить":
                                if len(message.text.split()) < 4:
                                    await message.edit(f"{title}\n\nВы не ввели название анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                elif message.text.split()[3] not in data["animations"]:
                                    await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                else:
                                    if len(message.text.split()) < 5:
                                        await message.edit(f"{title}\n\nВы не ввели фрейм")
                                        await asyncio.sleep(15)
                                        await message.delete()
                                    else:
                                        if len(data["animations"][message.text.split()[3]]['text']) > 0:
                                            if data["animations"][message.text.split()[3]]['text'][-1] == " ".join(message.text.split()[4:]):
                                                await message.edit(f"{title}\n\nНельзя добавлять два одинаковых фрейма подряд")
                                                await asyncio.sleep(15)
                                                await message.delete()
                                            else:
                                                data["animations"][message.text.split()[3]]['text'].append(" ".join(message.text.split()[4:]))
                                                write(data)
                                                await message.edit(f"{title}\n\nВы успешно добавили фрейм\n{" ".join(message.text.split()[4:])}")
                                                await asyncio.sleep(15)
                                                await message.delete()
                                        else:
                                            data["animations"][message.text.split()[3]]['text'].append(" ".join(message.text.split()[4:]))
                                            write(data)
                                            await message.edit(f"{title}\n\nВы успешно добавили фрейм\n{" ".join(message.text.split()[4:])}")
                                            await asyncio.sleep(15)
                                            await message.delete()
                            case "очистить":
                                if len(message.text.split()) < 4:
                                    await message.edit(f"{title}\n\nВы не ввели название анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                elif message.text.split()[3] not in data["animations"]:
                                    await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                else:
                                    data["animations"][message.text.split()[3]]["text"] = []
                                    write(data)
                                    await message.edit(f"{title}\n\nВы успешно очистили фреймы анимации: {message.text.split()[3]}")
                                    await asyncio.sleep(15)
                                    await message.delete()
                            case "список":
                                if len(message.text.split()) < 4:
                                    await message.edit(f"{title}\n\nВы не ввели название анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                elif message.text.split()[3] not in data["animations"]:
                                    await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                else:
                                    if len(data["animations"][message.text.split()[3]]["text"]) > 30:
                                        await message.edit(f"{title}\n\nАнимация содержит большое количество фреймов из за чего их невозможно отобразить!\nВы можете использовать команду {prefix}анимации тест {message.text.split()[3]} - чтобы посмотреть анимацию в действии")
                                        await asyncio.sleep(15)
                                        await message.delete()
                                    else:
                                        await message.edit(f"{title}\n\n{"\n".join(([f"{i+1}. {data["animations"][message.text.split()[3]]["text"][i]}" for i in range(len(data["animations"][message.text.split()[3]]["text"]))])) if len(data["animations"][message.text.split()[3]]["text"]) > 0 else "Вы еще не добавили фреймы для этой анимации"}")
                                        await asyncio.sleep(15 if len(data["animations"][message.text.split()[3]]["text"]) > 0 else 5)
                                        await message.delete()
                            case _:
                                pass
                case "тест":
                    if len(message.text.split()) < 3:
                        await message.edit(f"{title}\n\nВы не ввели название анимации")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        if message.text.split()[2] in data["animations"]: await play_animation(message, message.text.split()[2])
                        else:
                            await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                            await asyncio.sleep(15)
                            await message.delete()
                case "скорость":
                    if len(message.text.split()) < 3:
                        await message.edit(f"{title}\n\nВы не ввели название анимации")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        animation_name = message.text.split()[2]
                        if animation_name in data["animations"]:
                            if len(message.text.split()) < 4:
                                await message.edit(f"{title}\n\nВы не ввели время (в секундах)")
                                await asyncio.sleep(15)
                                await message.delete()
                            else:
                                try: speed = float(message.text.split()[3])
                                except: speed = ""
                                if speed == "":
                                    await message.edit(f"{title}\n\nВы не ввели время (в секундах)")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                elif speed > 10:
                                    await message.edit(f"{title}\n\nСкорость анимации не может быть больше 10 секунд!")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                elif speed < 0.01:
                                    await message.edit(f"{title}\n\nСкорость анимации не может быть меньше 0.01 секунд!")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                else:
                                    data["animations"][animation_name]["speed"] = speed
                                    write(data)
                                    await message.edit(f"{title}\n\nВы успешно изменили скорость анимации: {animation_name} на {speed} секунд")
                                    await asyncio.sleep(15)
                                    await message.delete()
                        else:
                            await message.edit(f"{title}\n\nВы ввели название не существующей анимации")
                            await asyncio.sleep(15)
                            await message.delete()
                case _:
                    await message.edit(f'{title}\n\nСоздать анимацию - {prefix}анимации создать Название\nУдалить анимацию - {prefix}анимации удалить Название\nТестировать анимацию - {prefix}анимации тест Название\nДобавить фрейм в анимацию - {prefix}анимации фрейм добавить Название Фрейм\nСписок фреймов анимации - {prefix}анимации фрейм список Название\nУдалить все фреймы из анимации - {prefix}анимации фрейм очистить Название\nУстановить скорость воспроизведения анимации - {prefix}анимации скорость Название Скорость(В секундах)')
                    await asyncio.sleep(35)
                    await message.delete()
        else:
            await message.edit(f'{title}\n\nСоздать анимацию - {prefix}анимации создать Название\nУдалить анимацию - {prefix}анимации удалить Название\nТестировать анимацию - {prefix}анимации тест Название\nДобавить фрейм в анимацию - {prefix}анимации фрейм добавить Название Фрейм\nСписок фреймов анимации - {prefix}анимации фрейм список Название\nУдалить все фреймы из анимации - {prefix}анимации фрейм очистить Название\nУстановить скорость воспроизведения анимации - {prefix}анимации скорость Название Скорость(В секундах)')
            await asyncio.sleep(35)
            await message.delete()
    elif command == "commands":
                title = "📃    Пользовательские команды"
                if len(message.text.split()) >= 2:
                    subcommand = message.text.split()[1].lower()
                    match subcommand:
                        case "создать":
                            await create_command(message, data)
                        case "удалить":
                            await delete_command(message, data)
                        case "псевдоним":
                            await manage_alias(message, data)
                        case "описание":
                            await manage_description(message, data)
                        case "действие":
                            await manage_action(message, data)
                        case _:
                            await message.edit(f'{title}\n\nНеизвестная подкоманда: {subcommand}')
                            await asyncio.sleep(15)
                            await message.delete()
                else:
                    await message.edit(f'''{title}\nСоздать новую команду - {prefix}команды создать Название_Команды
Удалить команду - {prefix}команды удалить Название_Команды
Добавить псевдоним для команды - {prefix}команды псевдоним добавить Название_Команды/Название_Псевдонима Название_Псевдонима
Удалить псевдоним - {prefix}команды псевдоним удалить Название_Псевдонима
Посмотреть псевдонимы команды - {prefix}команды псевдоним посмотреть Название_Команды/Название_Псевдонима
Добавить описание команды - {prefix}команды описание добавить Название_Команды Описание
Посмотреть описание команды - {prefix}команды описание посмотреть Название_Команды
Удалить описание команды - {prefix}команды описание удалить Название_Команды
Добавить действие команды - {prefix}команды действие добавить Название_Команды Название_Действия
Посмотреть действие команды - {prefix}команды действие посмотреть Название_Команды
Удалить действие команды - {prefix}команды действие удалить Название_Команды
Посмотреть список возможных действий команды - {prefix}команды действие список''')
                    await asyncio.sleep(35)
                    await message.delete()
    elif command == "key":
        title = f"🔍    Ключевой автоответчик"
        if len(message.text.split()) >= 2:
            match message.text.split()[1]:
                case "вкл":
                    data["key_auto"]["type_auto"] = True
                    write(data)
                    await message.edit(f"{title}\n\nВы успешно включили ключевой автоответчик")
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    data["key_auto"]["type_auto"] = False
                    write(data)
                    await message.edit(f"{title}\n\nВы успешно выключили ключевой автоответчик")
                    await asyncio.sleep(15)
                    await message.delete()
                case "типы":
                    await message.edit(f'{title}\n\n1. in - Проверяет если слово/предложение/символ находиться в тексте, то срабатывает ответ\n2. all - Проверяет если слово/предложение/символ соответствует сообщению, то срабатывает ответ')
                case "ответ":
                    if len(message.text.split()) >= 3:
                        try:
                            if not data["key_auto"][message.text.split()[2]]:
                                await message.edit(f"{title}\n\nВы ввели не существующий номер сообщения")
                                await asyncio.sleep(15)
                                await message.delete()
                            elif data["key_auto"][message.text.split()[2]]:
                                if len(message.text.split()) >= 4:
                                    data["key_auto"][message.text.split()[2]]["response"] = " ".join(message.text.split()[3:])
                                    write(data)
                                    await message.edit(f"{title}\n\nВы успешно добавили ответ для автоответчика")
                                    await asyncio.sleep(15)
                                    await message.delete()
                                else:
                                    await message.edit(f'📃    Ключевой автоответчик\n\nВведите ответ для сообщение(я): {data["key_auto"][message.text.split()[2]]["task"]}')
                                    await asyncio.sleep(15)
                                    await message.delete()
                        except:
                            await message.edit(f"{title}\n\nВы ввели не существующий номер сообщения")
                            await asyncio.sleep(15)
                            await message.delete()
                    else:
                        await message.edit(f"{title}\n\nВведите номер сообщения чтобы добавить ответ для автоответчика")
                        await asyncio.sleep(15)
                        await message.delete()
                case "удалить":
                    if len(message.text.split()) >= 3:
                        try:
                            if not data["key_auto"][message.text.split()[2]]:
                                await message.edit(f"{title}\n\nВы ввели не существующий номер сообщения")
                                await asyncio.sleep(15)
                                await message.delete()
                            elif data["key_auto"][message.text.split()[2]]:
                                await message.edit(f"{title}\n\nВы успешно удалили автоответчик для сообщения(ий): {", ".join(data["key_auto"][message.text.split()[2]]["task"])}")
                                del data["key_auto"][message.text.split()[2]]
                                write(data)
                                await asyncio.sleep(15)
                                await message.delete()
                        except:
                            await message.edit(f"{title}\n\nВы ввели не существующий номер сообщения")
                            await asyncio.sleep(15)
                            await message.delete()
                    else:
                        await message.edit(f"{title}\n\nВведите номер сообщения чтобы удалить автоответчик для него")
                        await asyncio.sleep(15)
                        await message.delete()
                case "список":
                    result = []
                    for key, value in data["key_auto"].items():
                        if key == "type_auto":
                            continue
                        tasks = ", ".join(value.get("task", []))
                        response = value.get("response", "")
                        if response == "":
                            response = "Ответ еще не назначен"
                        type_ = value.get("type", "")
                        result.append(f"{key}. {tasks} - {response} | {type_}")
                    if result != []:
                        await message.edit("\n".join(result))
                        await asyncio.sleep(35)
                        await message.delete()
                    else:
                        await message.edit("Вы еще не создали ни одного автоответа")
                        await asyncio.sleep(15)
                        await message.delete()
                case "создать":
                    if len(message.text.split()) == 2 or message.text.split()[2] not in ["in", "all"]:
                        await message.edit(f"{title}\n\nВы не ввели тип автоответчика (in/all)")
                        await asyncio.sleep(15)
                        await message.delete()
                    else:
                        if len(message.text.split()) == 3:
                            await message.edit(f"{title}\n\nВы не ввели сообщение")
                            await asyncio.sleep(15)
                            await message.delete()
                        else:
                            if message.text.split()[2] == "in":
                                data["key_auto"][max(int(key) for key in data["key_auto"].keys() if key.isdigit())+1] = {
                                    "task": [
                                        ' '.join(message.text.split()[3:]).lower().replace("?", '').replace("!", '')
                                    ],
                                    "response": "",
                                    "type": message.text.split()[2]
                                }
                                write(data)
                                await message.edit(f"{title}\n\nВы успешно создали автоответчик для сообщения: {" ".join(message.text.split()[3:]).lower().replace("?", '').replace("!", '')}\nЧтобы добавить ответ для этого автоответчика, используйте команду - {prefix}ключ ответ {len(data["key_auto"])-1} Ответ\nЧтобы удалить автоответ на это сообщение, используйте команду - {prefix}ключ удалить {len(data["key_auto"])-1}")
                                await asyncio.sleep(15)
                                await message.delete()
                            else:
                                data["key_auto"][max(int(key) for key in data["key_auto"].keys() if key.isdigit())+1] = {
                                    "task": [
                                        ' '.join(message.text.split()[3:])
                                    ],
                                    "response": "",
                                    "type": message.text.split()[2]
                                }
                                write(data)
                                await message.edit(f"{title}\n\nВы успешно создали автоответчик для сообщения: {" ".join(message.text.split()[3:])}\nЧтобы добавить ответ для этого автоответчика, используйте команду - {prefix}ключ ответ {len(data["key_auto"])-1} Ответ\nЧтобы удалить автоответ на это сообщение, используйте команду - {prefix}ключ удалить {len(data["key_auto"])-1}")
                                await asyncio.sleep(15)
                                await message.delete()
                case _:
                    await message.edit(f'{title}\n\nСоздать новый ключевой автоматический ответ - {prefix}ключ создать Тип Сообщение\nДобавить ответ для сообщения - {prefix}ключ ответ Номер_Сообщения Ответ\nУдалить ключевой автоматический ответ - {prefix}ключ удалить Номер_Сообщения\nПосмотреть список доступных автоматических ответов - {prefix}ключ список\nПосмотреть список доступных типов ключевых автоматических ответов - {prefix}ключ типы\nВключить ключевые автоматические ответы - {prefix}ключ вкл\nВыключить ключевые автоматические ответы  - {prefix}ключ выкл')
                    await asyncio.sleep(35)
                    await message.delete()
        else:
            await message.edit(f'{title}\n\nСоздать новый ключевой автоматический ответ - {prefix}ключ создать Тип Сообщение\nДобавить ответ для сообщения - {prefix}ключ ответ Номер_Сообщения Ответ\nУдалить ключевой автоматический ответ - {prefix}ключ удалить Номер_Сообщения\nПосмотреть список доступных автоматических ответов - {prefix}ключ список\nПосмотреть список доступных типов ключевых автоматических ответов - {prefix}ключ типы\nВключить ключевые автоматические ответы - {prefix}ключ вкл\nВыключить ключевые автоматические ответы  - {prefix}ключ выкл')
        await asyncio.sleep(35)
        await message.delete()
    elif command == "id":
        title = "👥    Получение id человека"
        if len(message.text.split()) == 2:
            try: chat = await app.get_chat(message.text.split()[1])
            except: chat = None
            await message.edit(f"{title}\n\n@{message.text.split()[1]} - {chat.id}" if chat != None else f"{title}\n\nПользователь не найден")
            await asyncio.sleep(15)
            await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}id @username - получить id по тегу")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "forward":
        title = "🔐    Скрытие автора пересланного сообщения"
        if len(message.text.split()) == 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили скрытие автора!")
                    data["forward"] = True
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили скрытие автора!")
                    data["forward"] = False
                    write(data)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\nИспользуйте вкл - чтобы включить и выкл - чтобы выключить автоматическое скрытие автора пересланного сообщения")
                    await asyncio.sleep(15)
                    await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}автор вкл - чтобы включить автоматическое скрытие автора пересланного сообщения\n{prefix}автор выкл - чтобы выключить автоматическое скрытие автора пересланного сообщения")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "channel":
        title = "🔍    Чат для ключевого автоматического ответа"
        if message.chat.id in channel_ids:
            channel_ids.remove(message.chat.id)
            data["channels_id"] = channel_ids
            write(data)
            await message.edit(f"{title}\n\nЭтот чат теперь не будет использоваться для автоматического ответа")
            await asyncio.sleep(15)
            await message.delete()
        else:
            channel_ids.append(message.chat.id)
            data["channels_id"] = channel_ids
            write(data)
            await message.edit(f"{title}\n\nЭтот чат теперь будет использоваться для автоматического ответа")
            await asyncio.sleep(15)
            await message.delete()
    elif command == "clear":
        title = "🔍    Очистка сообщений"
        data["auto_delete"]["type"] = not data["auto_delete"]["type"]
        write(data)
        await message.edit(f"{title}\n\nОчистка включена" if data["auto_delete"]["type"] else f"{title}\n\nОчистка выключена")
        await asyncio.sleep(15)
        await message.delete()
    elif command == "multisession":
        title = "👥    Использование нескольких аккаунтов для бота"
        if len(message.text.split()) == 2:
            match message.text.split()[1]:
                case "вкл":
                    await message.edit(f"{title}\n\nВы успешно включили мульти сессии!")
                    bot["multi_session"] = True
                    write_data(bot)
                    await asyncio.sleep(15)
                    await message.delete()
                case "выкл":
                    await message.edit(f"{title}\n\nВы успешно выключили мульти сессии!")
                    bot["multi_session"] = False
                    write_data(bot)
                    await asyncio.sleep(15)
                    await message.delete()
                case _:
                    await message.edit(f"{title}\n\nИспользуйте вкл - чтобы включить и выкл - чтобы выключить мульти сессии")
                    await asyncio.sleep(15)
                    await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}сессия вкл - чтобы включить мульти сессии\n{prefix}сессия выкл - чтобы выключить мульти сессии")
            await asyncio.sleep(35)
            await message.delete()
    elif command == "prefix":
        title = "📌    Префикс команд бота"
        if len(message.text.split()) == 2:
            await message.edit(f"{title}\n\nВы успешно установили новый префикс!")
            data["prefix"] = message.text.split()[1]
            prefix = data["prefix"]
            write(data)
            await asyncio.sleep(15)
            await message.delete()
        else:
            await message.edit(f"{title}\n\n{prefix}префикс Символ - Установить новый префикс для команд бота")
            await asyncio.sleep(35)
            await message.delete()
async def create_command(message, data):
    parts = message.text.split()
    if len(parts) < 3:
        await message.edit("Вы не указали название команды. Пример: /команды создать Название_Команды")
        await asyncio.sleep(15)
        await message.delete()
        return

    command_name = parts[2]
    if command_name in data["commands"]:
        await message.edit(f"Команда {command_name} уже существует.")
        await asyncio.sleep(15)
        await message.delete()
        return

    data["commands"][command_name] = {
        "text": "",
        "description": "",
        "aliases": []
    }
    write(data)
    await message.edit(f"Команда {command_name} успешно создана.")
    await asyncio.sleep(15)
    await message.delete()

async def delete_command(message, data):
    parts = message.text.split()
    if len(parts) < 3:
        await message.edit("Вы не указали название команды для удаления. Пример: /команды удалить Название_Команды")
        await asyncio.sleep(15)
        await message.delete()
        return

    command_name = parts[2]
    if command_name not in data["commands"]:
        await message.edit(f"Команда {command_name} не существует.")
        await asyncio.sleep(15)
        await message.delete()
        return

    del data["commands"][command_name]
    write(data)
    await message.edit(f"Команда {command_name} успешно удалена.")
    await asyncio.sleep(15)
    await message.delete()

async def manage_alias(message, data):
    parts = message.text.split()
    if len(parts) < 4:
        await message.edit("Вы не указали действие (добавить/удалить), название команды и псевдоним. Пример: /команды псевдоним добавить Название_Команды Название_Псевдонима")
        await asyncio.sleep(15)
        await message.delete()
        return

    action = parts[2]
    command_name = parts[3]
    if action == "добавить":
        if len(parts) < 5:
            await message.edit("Вы не указали псевдоним для добавления. Пример: /команды псевдоним добавить Название_Команды Название_Псевдонима")
            await asyncio.sleep(15)
            await message.delete()
            return

        alias = parts[4]
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        if alias in data["commands"][command_name]["aliases"]:
            await message.edit(f"Псевдоним {alias} уже существует для команды {command_name}.")
            await asyncio.sleep(15)
            await message.delete()
            return

        data["commands"][command_name]["aliases"].append(alias)
        write(data)
        await message.edit(f"Псевдоним {alias} успешно добавлен для команды {command_name}.")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "удалить":
        if len(parts) < 5:
            await message.edit("Вы не указали псевдоним для удаления. Пример: /команды псевдоним удалить Название_Псевдонима")
            await asyncio.sleep(15)
            await message.delete()
            return

        alias = parts[4]
        for cmd, cmd_data in data["commands"].items():
            if alias in cmd_data["aliases"]:
                cmd_data["aliases"].remove(alias)
                write(data)
                await message.edit(f"Псевдоним {alias} успешно удален.")
                await asyncio.sleep(15)
                await message.delete()
                return

        await message.edit(f"Псевдоним {alias} не найден.")
        await asyncio.sleep(15)
        await message.delete()

    else:
        await message.edit(f"Неизвестное действие: {action}. Используйте добавить или удалить.")
        await asyncio.sleep(15)
        await message.delete()

async def manage_description(message, data):
    parts = message.text.split()
    if len(parts) < 4:
        await message.edit("Вы не указали действие (добавить/удалить/посмотреть) и название команды. Пример: /команды описание добавить Название_Команды Описание")
        await asyncio.sleep(15)
        await message.delete()
        return

    action = parts[2]
    command_name = parts[3]
    if action == "добавить":
        if len(parts) < 5:
            await message.edit("Вы не указали описание. Пример: /команды описание добавить Название_Команды Описание")
            await asyncio.sleep(15)
            await message.delete()
            return

        description = " ".join(parts[4:])
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        data["commands"][command_name]["description"] = description
        write(data)
        await message.edit(f"Описание для команды {command_name} успешно добавлено.")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "удалить":
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        data["commands"][command_name]["description"] = ""
        write(data)
        await message.edit(f"Описание для команды {command_name} успешно удалено.")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "посмотреть":
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        description = data["commands"][command_name]["description"]
        await message.edit(f"Описание для команды {command_name}: {description}")
        await asyncio.sleep(15)
        await message.delete()

    else:
        await message.edit(f"Неизвестное действие: {action}. Используйте добавить, удалить или посмотреть.")
        await asyncio.sleep(15)
        await message.delete()

async def manage_action(message, data):
    parts = message.text.split()
    if len(parts) < 4:
        await message.edit("Вы не указали действие (добавить/удалить/посмотреть) и название команды. Пример: /команды действие добавить Название_Команды Название_Действия")
        await asyncio.sleep(15)
        await message.delete()
        return

    action = parts[2]
    command_name = parts[3]
    if action == "добавить":
        if len(parts) < 5:
            await message.edit("Вы не указали действие для добавления. Пример: /команды действие добавить Название_Команды Название_Действия")
            await asyncio.sleep(15)
            await message.delete()
            return

        action_name = parts[4]
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        if "actions" not in data["commands"][command_name]:
            data["commands"][command_name]["actions"] = []

        if action_name in data["commands"][command_name]["actions"]:
            await message.edit(f"Действие {action_name} уже существует для команды {command_name}.")
            await asyncio.sleep(15)
            await message.delete()
            return

        data["commands"][command_name]["actions"].append(action_name)
        write(data)
        await message.edit(f"Действие {action_name} успешно добавлено для команды {command_name}.")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "удалить":
        if len(parts) < 5:
            await message.edit("Вы не указали действие для удаления. Пример: /команды действие удалить Название_Команды Название_Действия")
            await asyncio.sleep(15)
            await message.delete()
            return

        action_name = parts[4]
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        if "actions" not in data["commands"][command_name] or action_name not in data["commands"][command_name]["actions"]:
            await message.edit(f"Действие {action_name} не найдено для команды {command_name}.")
            await asyncio.sleep(15)
            await message.delete()
            return

        data["commands"][command_name]["actions"].remove(action_name)
        write(data)
        await message.edit(f"Действие {action_name} успешно удалено для команды {command_name}.")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "посмотреть":
        if command_name not in data["commands"]:
            await message.edit(f"Команда {command_name} не существует.")
            await asyncio.sleep(15)
            await message.delete()
            return

        actions = data["commands"][command_name].get("actions", [])
        if not actions:
            await message.edit(f"Для команды {command_name} не назначено никаких действий.")
        else:
            await message.edit(f"Действия для команды {command_name}: {', '.join(actions)}")
        await asyncio.sleep(15)
        await message.delete()

    elif action == "список":
        actions_list = ["действие1", "действие2", "действие3"]  # Замените на реальный список возможных действий
        await message.edit(f"Список возможных действий: {', '.join(actions_list)}")
        await asyncio.sleep(15)
        await message.delete()

    else:
        await message.edit(f"Неизвестное действие: {action}. Используйте добавить, удалить, посмотреть или список.")
        await asyncio.sleep(15)
        await message.delete()
@app.on_message()
async def handle_message_app(client, message):
    data = read()
    await handle_message(client, message)
    if data["convert"]:
        wav_file = await download_and_convert_voice(message)
        if not wav_file:
            return
        text_ru = recognize_speech(wav_file)
        os.remove(wav_file)
        response = f"Распознанный текст:\n{text_ru}"
        await message.reply(response)
    elif data["gpt_voice"]:
        wav_file = await download_and_convert_voice(message)
        if not wav_file:
            return
        text_ru = recognize_speech(wav_file)
        os.remove(wav_file)
        response = gpt(text_ru)
        await message.reply(response)
if __name__ == "__main__": app.run()

# await app.send_message(
#     "me",
#     (
#         "**bold**, "
#         "__italic__, "
#         "--underline--, "
#         "~~strike~~, "
#         "||spoiler||, "
#         "[URL](https://pyrogram.org), "
#         "`code`, "
#         "```python\n"
#         "for i in range(10):\n"
#         "    print(i)\n"
#         "```"
#     ),
#     parse_mode=enums.ParseMode.MARKDOWN
# )